#!/usr/bin/python3
#+
# GrainyPy example--Comparison of different dithering settings.
# Invoke this script with the name of an input PNG file. The
# script will create an output image called dither_comparison.png,
# showing all the different dithering options applied to the input image.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Matrix, \
    Rect, \
    Vector
import grainy
from grainy import \
    BayerMatrix, \
    diffusion

max_dimensions = Vector(640, 480) # because screens in the old days weren’t much larger than this
dither_params = \
    ( # combinations of (label, do_depth, dither_order) to try
      # grouped into rows for display
        (
            ("Original", None, None),
            ("Posterize—4 bits", 4, BayerMatrix(1)),
            ("Posterize—2 bits", 2, BayerMatrix(1)),
            ("Posterize—1 bit", 1, BayerMatrix(1)),
        ),
        (
            ("Ordered—Bayer(2)", 0, BayerMatrix(2)),
            ("Ordered—Bayer(4)", 0, BayerMatrix(4)),
            ("Ordered—Bayer(8)", 0, BayerMatrix(8)),
            ("Ordered—Bayer(16)", 0, BayerMatrix(16)),
        ),
        (
            ("Diffusion—Floyd-Steinberg", 1, diffusion.floyd_steinberg),
            ("Diffusion—Jarvis-Judice-Ninke", 1, diffusion.jarvis_judice_ninke),
            ("Diffusion—Stucki", 1, diffusion.stucki),
            ("Diffusion—Burkes", 1, diffusion.burkes),
        ),
        (
            ("Diffusion—Sierra3", 1, diffusion.sierra3),
            ("Diffusion—Sierra2", 1, diffusion.sierra2),
            ("Diffusion—Sierra Lite", 1, diffusion.sierra_lite),
        ),
    )
margin = Vector(10, 10)

if len(sys.argv) != 2 :
    raise RuntimeError("usage: %s filename" % sys.argv[0])
#end if
invert = False # set to True to check for any bias in dithered output levels

img = qah.ImageSurface.create_from_png(sys.argv[1])
fit_img = \
    Rect.fit_to \
      (
        dst = Rect.from_dimensions(max_dimensions),
        src = Rect.from_dimensions(img.dimensions),
        outside = False
      )
img_dimensions = round(fit_img.mapdelta(img.dimensions))
src = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_RGB24,
    dimensions = img_dimensions
  )
(qah.Context.create(src)
    .set_matrix(Matrix.scale(img_dimensions / img.dimensions))
    .set_source
      (
        qah.Pattern.create_for_surface(img)
            .set_filter(CAIRO.FILTER_BEST)
      )
    .paint()
)
src.flush()
if invert :
    # operate on inverted source
    grainy.image_channel_op_1 \
      (
        op_table =
            tuple
              (
                pix ^ 255
                for pix in range(256)
              ),
        src_img = src,
        src_bounds = None,
        mask_img = None,
        mask_bounds = None,
        dst_img = src,
        dst_bounds = None,
        do_a = False,
        do_r = True,
        do_g = True,
        do_b = True
      )
#end if
tmp = src.create_like()
del img # free memory

nr_cols = max(len(row) for row in dither_params)
nr_rows = len(dither_params)

font_size = 24
ctx = qah.Context.create_for_dummy()
ctx.select_font_face("sans-serif", CAIRO.FONT_SLANT_NORMAL, CAIRO.FONT_WEIGHT_BOLD)
ctx.set_font_size(font_size)
use_font = ctx.scaled_font
text_height = ctx.font_extents.height
top_extra = ctx.font_extents.height * 1.5
text_colour = Colour.grey(0)
draw_dimensions = img_dimensions + margin + Vector(0, text_height)

pix = qah.ImageSurface.create \
  (
    format = CAIRO.FORMAT_RGB24,
    dimensions =
        round
          (
                draw_dimensions * Vector(nr_cols, nr_rows)
            +
                margin
            +
                Vector(0, top_extra)
          )
  )
ctx = \
    (qah.Context.create(pix)
        .set_source_colour(qah.Colour.grey(1))
        .paint()
    )
ctx.scaled_font = use_font
title = "Comparison Of Dithering Algorithms"
text_extents = ctx.text_extents(title)
ctx.move_to \
  ((
    (pix.width - text_extents.width) / 2,
    text_extents.height + text_extents.y_bearing + top_extra / 2
  ))
ctx.source_colour = text_colour
ctx.show_text(title)
for row_nr, row in enumerate(dither_params) :
    for col_nr, (label, to_depth, dither) in enumerate(row) :
        origin = draw_dimensions * Vector(col_nr, row_nr) + margin / 2 + Vector(0, top_extra)
        if to_depth != None :
            (grainy.image_diffusion_dither, grainy.image_ordered_dither) \
                [isinstance(dither, BayerMatrix)] \
              (
                dither = dither,
                depth = to_depth,
                src_img = src,
                src_bounds = None,
                dst_img = tmp,
                dst_bounds = None,
                do_a = False,
                do_r = True,
                do_g = True,
                do_b = True
              )
            ctx.set_source_surface(tmp, origin)
        else :
            # show original-quality image
            ctx.set_source_surface(src, origin)
        #end if
        (ctx
            .rectangle(Rect(origin.x, origin.y, img_dimensions.x, img_dimensions.y))
            .fill()
        )
        if invert :
            # undo inversion on output
            grainy.image_channel_op_1 \
              (
                op_table =
                    tuple
                      (
                        pix ^ 255
                        for pix in range(256)
                      ),
                src_img = pix,
                src_bounds = round(Rect(origin.x, origin.y, img_dimensions.x, img_dimensions.y)),
                mask_img = None,
                mask_bounds = None,
                dst_img = pix,
                dst_bounds = round(Rect(origin.x, origin.y, img_dimensions.x, img_dimensions.y)),
                do_a = False,
                do_r = True,
                do_g = True,
                do_b = True
              )
        #end if
        ctx.font_matrix = qah.Matrix.scale(font_size)
        text_extents = ctx.text_extents(label)
        max_text_width = draw_dimensions.x * 0.9
        if text_extents.width > max_text_width :
            hor_size = font_size * max_text_width / text_extents.width
            text_extents.width = max_text_width
        else :
            hor_size = font_size
        #end if
        ctx.font_matrix = qah.Matrix.scale((hor_size, font_size))
        ctx.move_to \
          (
                origin
            +
                img_dimensions * Vector(0.5, 1)
            +
                Vector
                  (
                    - text_extents.width / 2 - margin.x / 2,
                    text_height
                  )
          )
        ctx.source_colour = text_colour
        ctx.show_text(label)
    #end for
#end for
pix.flush()
pix.write_to_png("{}.png".format(os.path.basename(sys.argv[0])))
